# -*- coding: utf-8 -*-
"""homework1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wHiBILk_QiFK5ThKSZnUV0lET0itQWVe
"""

#@title Download the data from website
!wget -nc --no-check-certificate https://course.ccs.neu.edu/cs6220/fall2023/homework-1/netflix-data/movie_titles.csv
!wget -nc --no-check-certificate https://course.ccs.neu.edu/cs6220/fall2023/homework-1/netflix-data/combined_data_1.txt
!wget -nc --no-check-certificate https://course.ccs.neu.edu/cs6220/fall2023/homework-1/netflix-data/combined_data_2.txt
!wget -nc --no-check-certificate https://course.ccs.neu.edu/cs6220/fall2023/homework-1/netflix-data/combined_data_3.txt
!wget -nc --no-check-certificate https://course.ccs.neu.edu/cs6220/fall2023/homework-1/netflix-data/combined_data_4.txt
!wget -nc --no-check-certificate https://course.ccs.neu.edu/cs6220/fall2024/homework-1/basket_data.csv

from IPython.display import clear_output
clear_output()

print("Data in combined_data_1.txt looks like this: \n")
!head -5 combined_data_1.txt

print("\n\nData in movie_titles.csv looks like this: \n")
!head -5 movie_titles.csv

f = open("movie_titles.csv", encoding ="cp1252")
data_lines = open("combined_data_1.txt", "r").readlines()

"""## **Problem 1**"""

import csv

def cardinality_items(filename):
  cardinality_set = set()
  with open(filename, 'r') as file:
    for line in file:
      items = line.strip().split(',')
      for item in items:
        cardinality_set.add(item.strip())
    return len(cardinality_set)

print("The cardinality of the document given is",cardinality_items('basket_data.csv'))

"""## **Problem 2**"""

def all_itemsets(unique_items, k):
    res = []
    n = len(unique_items)

    def backtrack(comb, idx, remaining):
        if remaining == 0:
            res.append(comb[:])
        else:
            for i in range(idx, n):
                comb.append(unique_items[i])
                backtrack(comb, i + 1, remaining - 1)
                comb.pop()

    backtrack([], 0, k)
    return res

print("All possible sets:", all_itemsets( ["ham", "cheese", "bread"], 2 ))

"""## **Examining Our First Dataset**

## **Problem 3**

3(a) How many total records of movie ratings are there in the entire dataset (over all of combined_data_*.txt)?
"""

def total_records():
  total = 0
  for i in range(1, 5):
    filename = f'combined_data_{i}.txt'
    with open(filename, "r") as file:
      ratings = file.read()
    for line in ratings.split("\n"):
      if line:
        if line.endswith(":"):
          continue
        total += 1
  return total

print("There are", total_records(), "total records of movie ratings.")

"""3(b) How many total unique users are there in the entire dataset (over all of combined_data_*.txt)?"""

def total_unique_users():
  unique_users = set()
  for i in range(1, 5):
    filename = f'combined_data_{i}.txt'
    with open(filename, "r") as file:
      combined_data = file.readlines()
    for data in combined_data:
      data = data.rstrip()
      if data and not data.endswith(":"):
        user_id = data.split(",")[0]
        unique_users.add(user_id)
  return len(unique_users)

print("There are", total_unique_users(), "total unique users.")

"""3(c) What is the range of years that this data is valid over?"""

def range_of_year():
  for i in range(1, 5):
      filename = f'combined_data_{i}.txt'
      with open(filename, "r") as file:
        date = file.read()
      all_year = set()
      for data in date.split("\n"):
        if data.endswith(":"):
          continue
        if len(data) >= 3:
          year = data.split(",")[2].split("-")[0]
          all_year.add(int(year))
  return [min(all_year), max(all_year)]

print("The range of years that this data is valid over is", range_of_year())

"""## **Problem 4**"""

import pandas as pd
with open("movie_titles.csv", 'r', encoding = "cp1252") as file:
    column1, column2, column3=[], [], []
    for line in file:
        parts = line.strip().split(',')
        column1.append(parts[0])
        column2.append(parts[1])
        if(len(parts)>=2):
            column3.append(",".join(parts[2:]))

"""4(a) How many movies with unique names are there? That is to say, count the distinct names of the movies."""

print("There are",len(df_movie.movie_title.unique()), "movies with unique names.")

"""4(b) How many movie names refer to four different movies?"""

def count(filename):
  movie_name_count = {}
  res = 0
  with open(filename, encoding = "cp1252") as file:
    lines = csv.reader(file)
    for row in lines:
      if len(row) >= 3:
        movie = " ".join(row[2:])
        if movie in movie_name_count:
          movie_name_count[movie] += 1
        else:
          movie_name_count[movie] = 1
    for movie, count in movie_name_count.items():
      if count == 4:
        res += 1
    return res

print("There are", count("movie_titles.csv"), "movie names refer to four different movies.")

"""## **Problem 5**

5(a) How many users rated exactly 200 movies?
"""

def count():
  map = {}
  for file_number in range(1, 5):
    filename = f'combined_data_{file_number}.txt'
    with open(filename, "r") as file:
      line = file.read()
    for data in line.split("\n"):
      if data and not data.endswith(":"):
        user = int(data.split(",")[0])
        if user not in map:
          map[user] = 1
        else:
          map[user] += 1
  return map

def count_users(map):
  res = 0
  for n in map.values():
    if n == 200:
      res += 1
  return res

print(count_users(count()), "users rated exactly 200 movies.")

"""5(b) Of these users, take the lowest user ID and print out the names of the movies that this person liked the most (all 5 star ratings)."""

from collections import defaultdict

def lowest_user_id(count):
  users = set()
  for customer_id, count in count.items():
    if count == 200:
      users.add(customer_id)
  return min(users)

lowest_user_id = lowest_user_id(count_exact())

def movie_id_list(user):
  movie_id_list = defaultdict(set)
  for file_number in range(1, 5):
    filename = f'combined_data_{file_number}.txt'
    with open(filename, "r") as file:
      lines = file.readlines()
    for line in lines:
      line = line.rstrip()
      if line and line.endswith(":"):
          movie_id = int(line.split(":")[0])
      if line and len(line.split(",")) >= 3:
          customer = int(line.split(",")[0])
          rating = int(line.split(",")[1])
          if rating == 5:
            movie_id_list[customer].add(movie_id)
  return movie_id_list[user]

def most_liked(movie_id_list, movie_file):
  most_liked = set()
  with open(movie_file, "r", encoding = "cp1252") as file:
    lines = file.readlines()
  for line in lines:
    line = line.rstrip()
    if line and len(line.split(",")) >= 3:
      movie_id = int(line.split(",")[0])
      if movie_id in movie_id_list:
        title = "".join(line.split(",")[2:])
        most_liked.add(title)
  return most_liked

print("The lowest user id is", lowest_user_id)

movie_list = movie_id_list(lowest_user_id)

most_liked(movie_list, "movie_titles.csv")